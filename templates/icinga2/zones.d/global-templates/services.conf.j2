/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
    import "generic-service"

    check_command = "ping4"

    zone = "primary"

    assign where host.address && host.vars.check_ping4 == true
}

apply Service "ping6" {
    import "generic-service"

    check_command = "ping6"

    zone = "primary"

    assign where host.address6 && host.vars.check_ping6 == true
}


apply Service "disk" {
    check_command = "disk"

    // Check is executed on the remote command endpoint
    command_endpoint = host.vars.agent_endpoint

    assign where host.vars.agent_endpoint && host.vars.check_disk == true
}

apply Service "load" {
    check_command = "load"

    command_endpoint = host.vars.agent_endpoint

    assign where host.vars.agent_endpoint && host.vars.check_load == true
}

apply Service "memory" {
    check_command = "mem"

    // Check is executed on the remote command endpoint
    command_endpoint = host.vars.agent_endpoint

    vars.mem_used = true

    if (host.vars.mem_count_cache_as_free) {
        vars.mem_cache = host.vars.mem_count_cache_as_free
    } else {
        vars.mem_cache = true
    }

    vars.mem_warning = host.vars.memory_warning

    vars.mem_critical = host.vars.memory_critical

    assign where host.vars.agent_endpoint && host.vars.memory_critical && host.vars.memory_warning
}

apply Service "celery" {
  check_command = "celery"

  assign where host.vars.celery_broker
}

apply Service "http" for (http_check in host.vars.http_checks) {
  check_command = "http"

  vars.http_address = http_check.address
  vars.http_vhost = http_check.vhost
  vars.http_url = http_check.url
  vars.http_ssl = true
  vars.http_sni = true

  display_name = "http (" + vars.http_vhost + vars.http_url + ")"

  zone = "primary"

  assign where host.vars.http_checks
}

apply Service "smtps" {
  check_command = "ssmtp"

  vars.ssmtp_address = host.vars.smtps_address
  vars.ssmtp_port = host.vars.smtps_port

  zone = "primary"

  assign where host.vars.smtps_address
}

apply Service "imaps" {
  check_command = "imap"

  vars.imap_address = host.vars.imaps_address
  vars.imap_port = host.vars.imaps_port
  vars.imap_ssl = true

  zone = "primary"

  assign where host.vars.imaps_address
}

apply Service "apt" {
    check_command = "apt"

    vars.apt_list = true
    vars.apt_critical = "^[^\\(]*\\([^ ]* (Debian-Security:|Ubuntu:[^/]*/[^-]*-security)"

    assign where host.vars.os_type == "Debian" && host.vars.check_apt == true
}

apply Service "zfs" {
    check_command = "zfs"

    vars.capacity_warning = 70
    vars.capacity_critical = 80
    vars.fragmentation_warning = 30
    vars.fragmentation_critical = 40
    vars.zpool = host.vars.zpool

    assign where host.vars.zpool
}
