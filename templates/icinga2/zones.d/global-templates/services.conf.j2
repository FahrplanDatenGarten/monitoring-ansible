/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
    import "generic-service"

    check_command = "ping4"

    if (host.vars.ping4_address) {
        vars.ping_address = host.vars.ping4_address
    } else {
        vars.ping_address = host.address
    }
    zone = "primary"

    assign where (host.address || host.vars.ping4_address) && host.vars.check_ping4 == true
}

apply Service "ping6" {
    import "generic-service"

    check_command = "ping6"

    if (host.vars.ping6_address) {
        vars.ping_address = host.vars.ping6_address
    }

    if (host.vars.ping6_wpl) {
        vars.ping_wpl = host.vars.ping6_wpl
    }

    if (host.vars.ping6_cpl) {
        vars.ping_cpl = host.vars.ping6_cpl
    }

    zone = "primary"

    assign where (host.address6 || host.vars.ping6_address) && host.vars.check_ping6 == true
}


apply Service "disk" {
    import "generic-long-interval-agent-service"

    check_command = "disk"

    assign where host.vars.agent_endpoint && host.vars.check_disk == true
}

apply Service "load" {
    import "generic-agent-service"

    check_command = "load"

    assign where host.vars.agent_endpoint && host.vars.check_load == true
}

apply Service "memory" {
    import "generic-agent-service"

    check_command = "mem"

    vars.mem_used = true

    if (host.vars.mem_count_cache_as_free) {
        vars.mem_cache = host.vars.mem_count_cache_as_free
    } else {
        vars.mem_cache = true
    }

    vars.mem_warning = host.vars.memory_warning

    vars.mem_critical = host.vars.memory_critical

    assign where host.vars.agent_endpoint && host.vars.memory_critical && host.vars.memory_warning
}

apply Service "celery" {
    import "generic-agent-service"

    check_command = "celery"

    assign where host.vars.celery_broker
}

apply Service "celery_tasks" {
    import "generic-agent-service"

    check_command = "celery_tasks"

    assign where host.vars.celery_broker
}

apply Service "http_vhost_" for (key => config in host.vars.http_vhosts) {
    import "generic-service"

    check_command = "http"

    vars.http_address = config.address
    vars.http_vhost = config.vhost
    vars.http_url = config.url
    vars.http_ssl = true
    vars.http_sni = true

    zone = "primary"

    assign where host.vars.http_vhosts
}

apply Service "smtps" {
    import "generic-service"

    check_command = "ssmtp"

    vars.ssmtp_address = host.vars.smtps_address
    vars.ssmtp_port = host.vars.smtps_port

    zone = "primary"

    assign where host.vars.smtps_address
}

apply Service "ssl_cert_" for (key => config in host.vars.ssl_cert_checks) {
    import "generic-agent-service"

    check_command = "ssl_cert"

    check_interval = 10m
    retry_interval = 1m

    vars.ssl_cert_protocol = config.protocol
    vars.ssl_cert_critical = 7
    vars.ssl_cert_warn = 14

    if (config.address) {
        vars.ssl_cert_address = config.address
    } else {
        vars.ssl_cert_address = host.name
    }
    if (config.port) {
        vars.ssl_cert_port = config.port
    }
    if (config.cn) {
        vars.ssl_cert_cn = config.cn
    }
    if (config.altnames) {
        vars.ssl_cert_altnames = config.altnames
    }
    if (config.sni) {
        vars.ssl_cert_sni = config.sni
    }

    assign where host.vars.ssl_cert_checks
}

apply Service "imaps" {
    import "generic-service"

    check_command = "imap"

    vars.imap_address = host.vars.imaps_address
    vars.imap_port = host.vars.imaps_port
    vars.imap_ssl = true

    zone = "primary"

    assign where host.vars.imaps_address
}

apply Service "apt" {
    import "generic-long-interval-agent-service"

    check_command = "apt"

    vars.apt_list = true
    vars.apt_critical = "^[^\\(]*\\([^ ]* (Debian-Security:|Ubuntu:[^/]*/[^-]*-security)"

    assign where host.vars.os_type == "Debian" && host.vars.check_apt == true
}

apply Service "zfs" {
    import "generic-long-interval-agent-service"

    check_command = "zfs"

    vars.capacity_warning = 70
    vars.capacity_critical = 80
    vars.fragmentation_warning = 30
    vars.fragmentation_critical = 40
    vars.zpool = host.vars.zpool

    assign where host.vars.zpool
}

apply Service "dig_" for (key => config in host.vars.dig_checks) {
    import "generic-agent-service"

    check_command = "dig"

    check_interval = 10s

    if (config.lookup) {
        vars.dig_lookup = config.lookup
    } else {
        vars.dig_lookup = host.name
    }
    if (config.record_type) {
        vars.dig_record_type = config.record_type
    } else {
        vars.dig_record_type = "AAAA"
    }
    if (config.expected_address) {
        vars.dig_expected_address = config.expected_address
    }

    assign where host.vars.configs
}

apply Service "dig_cloudflare_" for (key => config in host.vars.dig_cloudflare_checks) {
    import "generic-agent-service"

    check_command = "dig"

    vars.dig_server = "2606:4700:4700::1111"

    if (config.lookup) {
        vars.dig_lookup = config.lookup
    } else {
        vars.dig_lookup = host.name
    }
    if (config.record_type) {
        vars.dig_record_type = config.record_type
    } else {
        vars.dig_record_type = "AAAA"
    }
    if (config.expected_address) {
        vars.dig_expected_address = config.expected_address
    }
    assign where host.vars.dig_cloudflare_checks
}

apply Service "dig_google_" for (key => config in host.vars.dig_google_checks) {
    import "generic-agent-service"

    check_command = "dig"

    vars.dig_server = "2001:4860:4860::8888"

    if (config.lookup) {
        vars.dig_lookup = config.lookup
    } else {
        vars.dig_lookup = host.name
    }
    if (config.record_type) {
        vars.dig_record_type = config.record_type
    } else {
        vars.dig_record_type = "AAAA"
    }
    if (config.expected_address) {
        vars.dig_expected_address = config.expected_address
    }
    assign where host.vars.dig_google_checks
}

apply Service "postgres_connection" {
    import "generic-agent-service"

    check_command = "postgres"

    if (host.vars.postgres_hostname) {
        vars.postgres_hostname = host.vars.postgres_hostname
    }

    if (host.vars.postgres_unixsocket) {
        vars.postgres_unixsocket = host.vars.postgres_unixsocket
    }

    vars.postgres_dbname = "template1"
    vars.postgres_dbuser = "nagios"

    vars.postgres_action = "connection"

    assign where host.vars.check_postgres_connection
}

apply Service "last b2 upload" {
    import "generic-long-interval-agent-service"

    check_command = "last_run"

    vars.last_run_datefile = host.vars.b2_upload_datefile
    vars.last_run_max_hours = host.vars.b2_upload_max_hours

    assign where host.vars.b2_upload_datefile && host.vars.b2_upload_max_hours
}

apply Service "last borgmatic backup" {
    import "generic-long-interval-agent-service"

    check_command = "borgmatic_last_run"

    vars.borgmatic_last_run_max_hours = host.vars.borgmatic_backup_max_hours

    assign where host.vars.borgmatic_backup_max_hours
}
